// This is borrowed from SQLITE3ORM, which
// is under the MIT License as so:
// The MIT License (MIT)
// Copyright (c) 2016-2021 Guenter Sandner
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// -----------------------------------------------------------------
export function quoteSimpleIdentifier(name) {
    return '"' + name.replace(/"/g, '""') + '"';
}
export function backtickQuoteSimpleIdentifier(name) {
    return '`' + name.replace(/`/g, '``') + '`';
}
// -----------------------------------------------------------------
export function quoteIdentifiers(name) {
    return name.split('.').map((value) => quoteSimpleIdentifier(value));
}
export function quoteIdentifier(name) {
    return quoteIdentifiers(name).join('.');
}
// -----------------------------------------------------------------
export function unqualifyIdentifier(name) {
    return name.split('.').pop();
}
export function quoteAndUnqualifyIdentifier(name) {
    return quoteSimpleIdentifier(unqualifyIdentifier(name));
}
// -----------------------------------------------------------------
export function qualifiySchemaIdentifier(name, schema) {
    if (name.indexOf('.') !== -1) {
        /* istanbul ignore if */
        if (schema && name.split('.').shift() !== schema) {
            throw new Error(`failed to qualify '${name}' by '${schema}`);
        }
        return name;
    }
    // What is this for?  The definition comes
    // from the original SQLITE3ORM code
    // schema = schema || SQL_DEFAULT_SCHEMA;
    return `${schema}.${name}`;
}
export function splitSchemaIdentifier(name) {
    const identifiers = name.split('.');
    if (identifiers.length >= 2) {
        return {
            identSchema: identifiers.shift(),
            identName: identifiers.join('.'),
        };
    }
    else {
        return { identName: identifiers[0] };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpZmllcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvY2FjaGUvaWRlbnRpZmllcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMENBQTBDO0FBQzFDLGtDQUFrQztBQUVsQyx3QkFBd0I7QUFFeEIsMENBQTBDO0FBRTFDLCtFQUErRTtBQUMvRSxnRkFBZ0Y7QUFDaEYsK0VBQStFO0FBQy9FLDRFQUE0RTtBQUM1RSx3RUFBd0U7QUFDeEUsMkRBQTJEO0FBRTNELGlGQUFpRjtBQUNqRixrREFBa0Q7QUFFbEQsNkVBQTZFO0FBQzdFLDJFQUEyRTtBQUMzRSw4RUFBOEU7QUFDOUUseUVBQXlFO0FBQ3pFLGdGQUFnRjtBQUNoRixnRkFBZ0Y7QUFDaEYsWUFBWTtBQUVaLG9FQUFvRTtBQUVwRSxNQUFNLFVBQVUscUJBQXFCLENBQUMsSUFBWTtJQUNoRCxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDOUMsQ0FBQztBQUVELE1BQU0sVUFBVSw2QkFBNkIsQ0FBQyxJQUFZO0lBQ3hELE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUM5QyxDQUFDO0FBRUQsb0VBQW9FO0FBRXBFLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxJQUFZO0lBQzNDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdEUsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBWTtJQUMxQyxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBRUQsb0VBQW9FO0FBRXBFLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxJQUFZO0lBQzlDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQVksQ0FBQztBQUN6QyxDQUFDO0FBRUQsTUFBTSxVQUFVLDJCQUEyQixDQUFDLElBQVk7SUFDdEQsT0FBTyxxQkFBcUIsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxvRUFBb0U7QUFFcEUsTUFBTSxVQUFVLHdCQUF3QixDQUFDLElBQVksRUFBRSxNQUFlO0lBQ3BFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzdCLHdCQUF3QjtRQUN4QixJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQ2pELE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLElBQUksU0FBUyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRCwwQ0FBMEM7SUFDMUMsb0NBQW9DO0lBQ3BDLHlDQUF5QztJQUN6QyxPQUFPLEdBQUcsTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsSUFBWTtJQUloRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBDLElBQUksV0FBVyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUM1QixPQUFPO1lBQ0wsV0FBVyxFQUFFLFdBQVcsQ0FBQyxLQUFLLEVBQUU7WUFDaEMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ2pDLENBQUM7SUFDSixDQUFDO1NBQU0sQ0FBQztRQUNOLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDdkMsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGlzIGJvcnJvd2VkIGZyb20gU1FMSVRFM09STSwgd2hpY2hcbi8vIGlzIHVuZGVyIHRoZSBNSVQgTGljZW5zZSBhcyBzbzpcblxuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbi8vIENvcHlyaWdodCAoYykgMjAxNi0yMDIxIEd1ZW50ZXIgU2FuZG5lclxuXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBmdW5jdGlvbiBxdW90ZVNpbXBsZUlkZW50aWZpZXIobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuICdcIicgKyBuYW1lLnJlcGxhY2UoL1wiL2csICdcIlwiJykgKyAnXCInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFja3RpY2tRdW90ZVNpbXBsZUlkZW50aWZpZXIobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuICdgJyArIG5hbWUucmVwbGFjZSgvYC9nLCAnYGAnKSArICdgJztcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1b3RlSWRlbnRpZmllcnMobmFtZTogc3RyaW5nKTogc3RyaW5nW10ge1xuICByZXR1cm4gbmFtZS5zcGxpdCgnLicpLm1hcCgodmFsdWUpID0+IHF1b3RlU2ltcGxlSWRlbnRpZmllcih2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVvdGVJZGVudGlmaWVyKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBxdW90ZUlkZW50aWZpZXJzKG5hbWUpLmpvaW4oJy4nKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucXVhbGlmeUlkZW50aWZpZXIobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIG5hbWUuc3BsaXQoJy4nKS5wb3AoKSBhcyBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdW90ZUFuZFVucXVhbGlmeUlkZW50aWZpZXIobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHF1b3RlU2ltcGxlSWRlbnRpZmllcih1bnF1YWxpZnlJZGVudGlmaWVyKG5hbWUpKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1YWxpZml5U2NoZW1hSWRlbnRpZmllcihuYW1lOiBzdHJpbmcsIHNjaGVtYT86IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChuYW1lLmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoc2NoZW1hICYmIG5hbWUuc3BsaXQoJy4nKS5zaGlmdCgpICE9PSBzY2hlbWEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgZmFpbGVkIHRvIHF1YWxpZnkgJyR7bmFtZX0nIGJ5ICcke3NjaGVtYX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWU7XG4gIH1cbiAgLy8gV2hhdCBpcyB0aGlzIGZvcj8gIFRoZSBkZWZpbml0aW9uIGNvbWVzXG4gIC8vIGZyb20gdGhlIG9yaWdpbmFsIFNRTElURTNPUk0gY29kZVxuICAvLyBzY2hlbWEgPSBzY2hlbWEgfHwgU1FMX0RFRkFVTFRfU0NIRU1BO1xuICByZXR1cm4gYCR7c2NoZW1hfS4ke25hbWV9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0U2NoZW1hSWRlbnRpZmllcihuYW1lOiBzdHJpbmcpOiB7XG4gIGlkZW50TmFtZTogc3RyaW5nO1xuICBpZGVudFNjaGVtYT86IHN0cmluZztcbn0ge1xuICBjb25zdCBpZGVudGlmaWVycyA9IG5hbWUuc3BsaXQoJy4nKTtcblxuICBpZiAoaWRlbnRpZmllcnMubGVuZ3RoID49IDIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWRlbnRTY2hlbWE6IGlkZW50aWZpZXJzLnNoaWZ0KCksXG4gICAgICBpZGVudE5hbWU6IGlkZW50aWZpZXJzLmpvaW4oJy4nKSxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7IGlkZW50TmFtZTogaWRlbnRpZmllcnNbMF0gfTtcbiAgfVxufVxuIl19