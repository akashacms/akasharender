import path from 'node:path';
import { promises as fsp } from 'node:fs';
import Joi from "joi";
;
const joiIsPathsReturnType = Joi.object({
    vpath: Joi.string(),
    mime: Joi.string().optional().allow(null),
    mounted: Joi.string(),
    mountPoint: Joi.string(),
    pathInMounted: Joi.string(),
    mtimeMs: Joi.number(), // .integer(),
    info: Joi.any(),
    fspath: Joi.string(),
    renderPath: Joi.string()
});
export function validatePathsReturnType(obj) {
    return joiIsPathsReturnType.validate(obj);
}
;
export const joiAsset = Joi.object({
    vpath: Joi.string(),
    renderPath: Joi.string(),
    mime: Joi.string().optional().allow(null),
    mounted: Joi.string(),
    mountPoint: Joi.string(),
    pathInMounted: Joi.string(),
    fspath: Joi.string(),
    dirname: Joi.string(),
    mtimeMs: Joi.number(), // .integer(),
    info: Joi.any()
});
export function validateAsset(obj) {
    return joiAsset.validate(obj);
}
export const createAssetsTable = await fsp.readFile(path.join(import.meta.dirname, 'sql', 'create-table-assets.sql'), 'utf-8');
// This function and its siblings exist to avoid
// potential for conflict in initializing the
// variable holding the SQL and invoking
// the SQL to create the table.  By placing both
// in the same source file we ensure no conflict.
export async function doCreateAssetsTable(db) {
    await db.run(await createAssetsTable);
}
;
export const joiPartial = Joi.object({
    vpath: Joi.string(),
    renderPath: Joi.string(),
    mime: Joi.string().optional().allow(null),
    mounted: Joi.string(),
    mountPoint: Joi.string(),
    pathInMounted: Joi.string(),
    fspath: Joi.string(),
    dirname: Joi.string(),
    mtimeMs: Joi.number(), // .integer(),
    info: Joi.any(),
    // Added fields
    docBody: Joi.string().optional().allow(null),
    rendererName: Joi.string().optional().allow(null)
});
export function validatePartial(obj) {
    return joiPartial.validate(obj);
}
export const createPartialsTable = await fsp.readFile(path.join(import.meta.dirname, 'sql', 'create-table-partials.sql'), 'utf-8');
export async function doCreatePartialsTable(db) {
    await db.run(await createPartialsTable);
}
;
export const joiLayout = Joi.object({
    vpath: Joi.string(),
    renderPath: Joi.string(),
    mime: Joi.string().optional().allow(null),
    mounted: Joi.string(),
    mountPoint: Joi.string(),
    pathInMounted: Joi.string(),
    fspath: Joi.string(),
    dirname: Joi.string(),
    mtimeMs: Joi.number(), // .integer(),
    info: Joi.any(),
    // Added fields
    rendersToHTML: Joi.alternatives()
        .try(Joi.boolean(), Joi.number().integer().min(0).max(1)),
    docBody: Joi.string().optional().allow(null),
    rendererName: Joi.string().min(0).optional().allow(null)
});
export function validateLayout(obj) {
    return joiLayout.validate(obj);
}
export const createLayoutsTable = await fsp.readFile(path.join(import.meta.dirname, 'sql', 'create-table-layouts.sql'), 'utf-8');
export async function doCreateLayoutsTable(db) {
    await db.run(await createLayoutsTable);
}
;
export const joiDocument = Joi.object({
    vpath: Joi.string(),
    mime: Joi.string().optional().allow(null),
    mounted: Joi.string(),
    mountPoint: Joi.string(),
    pathInMounted: Joi.string(),
    fspath: Joi.string(),
    dirname: Joi.string(),
    mtimeMs: Joi.number(), // .integer(),
    info: Joi.any(),
    // Added fields
    renderPath: Joi.string(),
    rendersToHTML: Joi.alternatives()
        .try(Joi.boolean(), Joi.number().integer().min(0).max(1)),
    parentDir: Joi.string(),
    publicationTime: Joi.number().optional().allow(null),
    baseMetadata: Joi.any(),
    docMetadata: Joi.any(),
    docContent: Joi.string().min(0).optional().allow(null),
    docBody: Joi.string().min(0).optional().allow(null),
    metadata: Joi.any(),
    tags: Joi.any(),
    layout: Joi.alternatives()
        .try(Joi.string(), Joi.allow(null)),
    blogtag: Joi.alternatives()
        .try(Joi.string(), Joi.allow(null)),
    rendererName: Joi.string().min(0).optional().allow(null)
});
export function validateDocument(obj) {
    return joiDocument.validate(obj);
}
export const createDocumentsTable = await fsp.readFile(path.join(import.meta.dirname, 'sql', 'create-table-documents.sql'), 'utf-8');
export async function doCreateDocumentsTable(db) {
    await db.run(await createDocumentsTable);
}
//# sourceMappingURL=data:application/json;base64,