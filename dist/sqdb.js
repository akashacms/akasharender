/**
 *
 * Copyright 2024-2025 David Herron
 *
 * This file is part of AkashaCMS (http://akashacms.com/).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * SQL Database support using SQLITE3.
 *
 * What's supported is SQLITE3ORM - a lightweight
 * ORM that runs on top of SQLITE3.
 */
import fs from 'node:fs';
import { Base64 } from 'js-base64';
// import sqleanLibs from 'sqlite3-sqlean';
import * as sqlite_regex from "sqlite-regex";
import { SqlDatabase } from 'sqlite3orm';
import { SQ3DataStore } from 'sq3-kv-data-store';
/**
 * Subclass the SqlDatabase so we can expose
 * the underlying SQLITE3 Database object and
 * some useful methods on that class.
 */
export class SqlDatabaseChild extends SqlDatabase {
    get _db() { return this.db; }
    loadExtension(filename, callback) {
        return this.db.loadExtension(filename, callback);
    }
}
const dburl = typeof process.env.AK_DB_URL === 'string'
    ? process.env.AK_DB_URL
    : ':memory:';
// Turns on full stack traces
// SqlDatabase.verbose();
export const sqdb = new SqlDatabaseChild();
await sqdb.open(dburl);
// await sqdb.open('test.db');
// sqdb.loadExtension(sqleanLibs.reLibPath);
sqdb.loadExtension(sqlite_regex.getLoadablePath());
// This traces SQL statements
//
// sqdb.on('trace', sql => {
//     console.log(sql);
// });
sqdb.on('error', err => {
    console.error(err);
});
sqdb._db.on('error', err => {
    console.error(err);
});
// Profiling SQL queries
// This might be useful for performance evaluation.
// The output is TSV separated fields:
//   1. base64-encoded SQL
//      This was chosen to prevent newlines in this field
//      and to keep the format simple
//   2. Approximate number of milliseconds to execute
//
// In practice the number of milliseconds is either
// zero or one, indicating there isn't enough precision
// in the code invoking this callback.
//
// In other words this doesn't seem terribly useful.
if (typeof process.env.AK_PROFILE === 'string') {
    sqdb.on('profile', (sql, time) => {
        fs.writeFileSync(process.env.AK_PROFILE, `${Base64.encode(sql)}  ${time}\n`, { flag: "a+" });
    });
}
////////////////////////
export function newSQ3DataStore(name) {
    // console.log(`newSQ3DataStore ${name}`);
    return new SQ3DataStore(sqdb._db, name);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FkYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9zcWRiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUVIOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3pCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbkMsMkNBQTJDO0FBQzNDLE9BQU8sS0FBSyxZQUFZLE1BQU0sY0FBYyxDQUFDO0FBRTdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWpEOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsV0FBVztJQUM3QyxJQUFJLEdBQUcsS0FBZSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXZDLGFBQWEsQ0FBQyxRQUFnQixFQUFFLFFBQXVDO1FBQ25FLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDSjtBQUVELE1BQU0sS0FBSyxHQUFHLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssUUFBUTtJQUMvQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTO0lBQ3ZCLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFFckIsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6QixNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0FBQzNDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2Qiw4QkFBOEI7QUFDOUIsNENBQTRDO0FBQzVDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFFbkQsNkJBQTZCO0FBQzdCLEVBQUU7QUFDRiw0QkFBNEI7QUFDNUIsd0JBQXdCO0FBQ3hCLE1BQU07QUFDTixJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRTtJQUNuQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCx3QkFBd0I7QUFDeEIsbURBQW1EO0FBQ25ELHNDQUFzQztBQUN0QywwQkFBMEI7QUFDMUIseURBQXlEO0FBQ3pELHFDQUFxQztBQUNyQyxxREFBcUQ7QUFDckQsRUFBRTtBQUNGLG1EQUFtRDtBQUNuRCx1REFBdUQ7QUFDdkQsc0NBQXNDO0FBQ3RDLEVBQUU7QUFDRixvREFBb0Q7QUFDcEQsSUFBSSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxLQUFLLFFBQVEsRUFBRSxDQUFDO0lBQzdDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQzdCLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQ25DLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksRUFDbEMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQ2pCLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCx3QkFBd0I7QUFFeEIsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFZO0lBR3hDLDBDQUEwQztJQUMxQyxPQUFPLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIENvcHlyaWdodCAyMDI0LTIwMjUgRGF2aWQgSGVycm9uXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgQWthc2hhQ01TIChodHRwOi8vYWthc2hhY21zLmNvbS8pLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFNRTCBEYXRhYmFzZSBzdXBwb3J0IHVzaW5nIFNRTElURTMuXG4gKiBcbiAqIFdoYXQncyBzdXBwb3J0ZWQgaXMgU1FMSVRFM09STSAtIGEgbGlnaHR3ZWlnaHRcbiAqIE9STSB0aGF0IHJ1bnMgb24gdG9wIG9mIFNRTElURTMuXG4gKi9cblxuaW1wb3J0IGZzIGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0IHsgQmFzZTY0IH0gZnJvbSAnanMtYmFzZTY0JztcbmltcG9ydCB7IERhdGFiYXNlIH0gZnJvbSAnc3FsaXRlMyc7XG4vLyBpbXBvcnQgc3FsZWFuTGlicyBmcm9tICdzcWxpdGUzLXNxbGVhbic7XG5pbXBvcnQgKiBhcyBzcWxpdGVfcmVnZXggZnJvbSBcInNxbGl0ZS1yZWdleFwiO1xuXG5pbXBvcnQgeyBTcWxEYXRhYmFzZSB9IGZyb20gJ3NxbGl0ZTNvcm0nO1xuaW1wb3J0IHsgU1EzRGF0YVN0b3JlIH0gZnJvbSAnc3EzLWt2LWRhdGEtc3RvcmUnO1xuXG4vKipcbiAqIFN1YmNsYXNzIHRoZSBTcWxEYXRhYmFzZSBzbyB3ZSBjYW4gZXhwb3NlXG4gKiB0aGUgdW5kZXJseWluZyBTUUxJVEUzIERhdGFiYXNlIG9iamVjdCBhbmRcbiAqIHNvbWUgdXNlZnVsIG1ldGhvZHMgb24gdGhhdCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNxbERhdGFiYXNlQ2hpbGQgZXh0ZW5kcyBTcWxEYXRhYmFzZSB7XG4gICAgZ2V0IF9kYigpOiBEYXRhYmFzZSB7IHJldHVybiB0aGlzLmRiOyB9XG5cbiAgICBsb2FkRXh0ZW5zaW9uKGZpbGVuYW1lOiBzdHJpbmcsIGNhbGxiYWNrPzogKGVycj86IEVycm9yIHwgbnVsbCkgPT4gdm9pZCk6IERhdGFiYXNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGIubG9hZEV4dGVuc2lvbihmaWxlbmFtZSwgY2FsbGJhY2spO1xuICAgIH1cbn1cblxuY29uc3QgZGJ1cmwgPSB0eXBlb2YgcHJvY2Vzcy5lbnYuQUtfREJfVVJMID09PSAnc3RyaW5nJ1xuICAgICAgICA/IHByb2Nlc3MuZW52LkFLX0RCX1VSTFxuICAgICAgICA6ICc6bWVtb3J5Oic7XG5cbi8vIFR1cm5zIG9uIGZ1bGwgc3RhY2sgdHJhY2VzXG4vLyBTcWxEYXRhYmFzZS52ZXJib3NlKCk7XG5leHBvcnQgY29uc3Qgc3FkYiA9IG5ldyBTcWxEYXRhYmFzZUNoaWxkKCk7XG5hd2FpdCBzcWRiLm9wZW4oZGJ1cmwpO1xuLy8gYXdhaXQgc3FkYi5vcGVuKCd0ZXN0LmRiJyk7XG4vLyBzcWRiLmxvYWRFeHRlbnNpb24oc3FsZWFuTGlicy5yZUxpYlBhdGgpO1xuc3FkYi5sb2FkRXh0ZW5zaW9uKHNxbGl0ZV9yZWdleC5nZXRMb2FkYWJsZVBhdGgoKSk7XG5cbi8vIFRoaXMgdHJhY2VzIFNRTCBzdGF0ZW1lbnRzXG4vL1xuLy8gc3FkYi5vbigndHJhY2UnLCBzcWwgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKHNxbCk7XG4vLyB9KTtcbnNxZGIub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG59KTtcblxuc3FkYi5fZGIub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG59KTtcblxuLy8gUHJvZmlsaW5nIFNRTCBxdWVyaWVzXG4vLyBUaGlzIG1pZ2h0IGJlIHVzZWZ1bCBmb3IgcGVyZm9ybWFuY2UgZXZhbHVhdGlvbi5cbi8vIFRoZSBvdXRwdXQgaXMgVFNWIHNlcGFyYXRlZCBmaWVsZHM6XG4vLyAgIDEuIGJhc2U2NC1lbmNvZGVkIFNRTFxuLy8gICAgICBUaGlzIHdhcyBjaG9zZW4gdG8gcHJldmVudCBuZXdsaW5lcyBpbiB0aGlzIGZpZWxkXG4vLyAgICAgIGFuZCB0byBrZWVwIHRoZSBmb3JtYXQgc2ltcGxlXG4vLyAgIDIuIEFwcHJveGltYXRlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZXhlY3V0ZVxuLy9cbi8vIEluIHByYWN0aWNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGlzIGVpdGhlclxuLy8gemVybyBvciBvbmUsIGluZGljYXRpbmcgdGhlcmUgaXNuJ3QgZW5vdWdoIHByZWNpc2lvblxuLy8gaW4gdGhlIGNvZGUgaW52b2tpbmcgdGhpcyBjYWxsYmFjay5cbi8vXG4vLyBJbiBvdGhlciB3b3JkcyB0aGlzIGRvZXNuJ3Qgc2VlbSB0ZXJyaWJseSB1c2VmdWwuXG5pZiAodHlwZW9mIHByb2Nlc3MuZW52LkFLX1BST0ZJTEUgPT09ICdzdHJpbmcnKSB7XG4gICAgc3FkYi5vbigncHJvZmlsZScsIChzcWwsIHRpbWUpID0+IHtcbiAgICAgICAgZnMud3JpdGVGaWxlU3luYyhwcm9jZXNzLmVudi5BS19QUk9GSUxFLFxuICAgICAgICAgICAgYCR7QmFzZTY0LmVuY29kZShzcWwpfSAgJHt0aW1lfVxcbmAsXG4gICAgICAgICAgICB7IGZsYWc6IFwiYStcIiB9XG4gICAgICAgICk7XG4gICAgfSk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgZnVuY3Rpb24gbmV3U1EzRGF0YVN0b3JlKG5hbWU6IHN0cmluZylcbiAgICA6IFNRM0RhdGFTdG9yZVxue1xuICAgIC8vIGNvbnNvbGUubG9nKGBuZXdTUTNEYXRhU3RvcmUgJHtuYW1lfWApO1xuICAgIHJldHVybiBuZXcgU1EzRGF0YVN0b3JlKHNxZGIuX2RiLCBuYW1lKTtcbn1cbiJdfQ==