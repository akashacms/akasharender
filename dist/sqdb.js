/**
 *
 * Copyright 2024-2025 David Herron
 *
 * This file is part of AkashaCMS (http://akashacms.com/).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
// import sqleanLibs from 'sqlite3-sqlean';
import * as sqlite_regex from "sqlite-regex";
import * as sqlite_vec from 'sqlite-vec';
import * as sqlite_lembed from 'sqlite-lembed';
import { SQ3DataStore } from 'sq3-kv-data-store';
import { AsyncDatabase } from 'promised-sqlite3';
import { default as SQ3QueryLog } from 'sqlite3-query-log';
const dburl = typeof process.env.AK_DB_URL === 'string'
    ? process.env.AK_DB_URL
    : ':memory:';
export const sqdb = await AsyncDatabase.open(dburl);
// await sqdb.open(dburl);
// await sqdb.open('test.db');
// sqdb.loadExtension(sqleanLibs.reLibPath);
sqdb.inner.loadExtension(sqlite_regex.getLoadablePath());
const lembedModelFile = typeof process.env.AK_LEMBED_MODEL === 'string'
    ? process.env.AK_LEMBED_MODEL
    : undefined;
export const lembedModelName = typeof process.env.AK_LEMBED_MODEL_NAME === 'string'
    ? process.env.AK_LEMBED_MODEL_NAME
    : undefined;
if (typeof lembedModelFile !== 'undefined') {
    console.log({
        lembedModelFile,
        lembedModelName,
        lembed: sqlite_lembed.getLoadablePath(),
        vec: sqlite_vec.getLoadablePath()
    });
    sqlite_lembed.load(sqdb.inner);
    sqlite_vec.load(sqdb.inner);
    await sqdb.run(`
        INSERT INTO temp.lembed_models(name, model)
        select ?, lembed_model_from_file(?);
    `, [
        lembedModelName,
        lembedModelFile
    ]);
}
await sqdb.run('PRAGMA journal_mode=WAL;');
// if (typeof process.env.AK_PROFILE === 'string') {
//     SQ3QueryLog(sqdb.inner, process.env.AK_PROFILE);
// }
// This traces SQL statements
//
// sqdb.inner.on('trace', sql => {
//     console.log(sql);
// });
sqdb.inner.on('error', err => {
    console.error(err);
});
sqdb.inner.on('error', err => {
    console.error(err);
});
// Profiling SQL queries
// This might be useful for performance evaluation.
// The output is TSV separated fields:
//   1. base64-encoded SQL
//      This was chosen to prevent newlines in this field
//      and to keep the format simple
//   2. Approximate number of milliseconds to execute
//
if (typeof process.env.AK_PROFILE === 'string') {
    SQ3QueryLog(sqdb.inner, process.env.AK_PROFILE);
}
////////////////////////
export function newSQ3DataStore(name) {
    // console.log(`newSQ3DataStore ${name}`);
    return new SQ3DataStore(sqdb.inner, name);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FkYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9zcWRiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQVdILDJDQUEyQztBQUMzQyxPQUFPLEtBQUssWUFBWSxNQUFPLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEtBQUssVUFBVSxNQUFTLFlBQVksQ0FBQztBQUM1QyxPQUFPLEtBQUssYUFBYSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELE9BQU8sRUFBRSxPQUFPLElBQUksV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFM0QsTUFBTSxLQUFLLEdBQUcsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxRQUFRO0lBQy9DLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVM7SUFDdkIsQ0FBQyxDQUFDLFVBQVUsQ0FBQztBQUVyQixNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BELDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIsNENBQTRDO0FBQzVDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBRXpELE1BQU0sZUFBZSxHQUFHLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEtBQUssUUFBUTtJQUMvRCxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlO0lBQzdCLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDcEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxRQUFRO0lBQzNFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQjtJQUNsQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBRXBCLElBQUksT0FBTyxlQUFlLEtBQUssV0FBVyxFQUFFLENBQUM7SUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNSLGVBQWU7UUFDZixlQUFlO1FBQ2YsTUFBTSxFQUFFLGFBQWEsQ0FBQyxlQUFlLEVBQUU7UUFDdkMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxlQUFlLEVBQUU7S0FDcEMsQ0FBQyxDQUFDO0lBQ0gsYUFBYSxDQUFDLElBQUksQ0FBTSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsVUFBVSxDQUFDLElBQUksQ0FBTSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFakMsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDOzs7S0FHZCxFQUFFO1FBQ0MsZUFBZTtRQUNmLGVBQWU7S0FDbEIsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBRTNDLG9EQUFvRDtBQUNwRCx1REFBdUQ7QUFDdkQsSUFBSTtBQUVKLDZCQUE2QjtBQUM3QixFQUFFO0FBQ0Ysa0NBQWtDO0FBQ2xDLHdCQUF3QjtBQUN4QixNQUFNO0FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0lBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7SUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILHdCQUF3QjtBQUN4QixtREFBbUQ7QUFDbkQsc0NBQXNDO0FBQ3RDLDBCQUEwQjtBQUMxQix5REFBeUQ7QUFDekQscUNBQXFDO0FBQ3JDLHFEQUFxRDtBQUNyRCxFQUFFO0FBQ0YsSUFBSSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxLQUFLLFFBQVEsRUFBRSxDQUFDO0lBQzdDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUdELHdCQUF3QjtBQUV4QixNQUFNLFVBQVUsZUFBZSxDQUFDLElBQVk7SUFHeEMsMENBQTBDO0lBQzFDLE9BQU8sSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMjQtMjAyNSBEYXZpZCBIZXJyb25cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBBa2FzaGFDTVMgKGh0dHA6Ly9ha2FzaGFjbXMuY29tLykuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogU1FMIERhdGFiYXNlIHN1cHBvcnQgdXNpbmcgU1FMSVRFMy5cbiAqIFxuICogV2hhdCdzIHN1cHBvcnRlZCBpcyBTUUxJVEUzT1JNIC0gYSBsaWdodHdlaWdodFxuICogT1JNIHRoYXQgcnVucyBvbiB0b3Agb2YgU1FMSVRFMy5cbiAqL1xuXG5pbXBvcnQgZnMgZnJvbSAnbm9kZTpmcyc7XG5pbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gJ3NxbGl0ZTMnO1xuLy8gaW1wb3J0IHNxbGVhbkxpYnMgZnJvbSAnc3FsaXRlMy1zcWxlYW4nO1xuaW1wb3J0ICogYXMgc3FsaXRlX3JlZ2V4ICBmcm9tIFwic3FsaXRlLXJlZ2V4XCI7XG5pbXBvcnQgKiBhcyBzcWxpdGVfdmVjICAgIGZyb20gJ3NxbGl0ZS12ZWMnO1xuaW1wb3J0ICogYXMgc3FsaXRlX2xlbWJlZCBmcm9tICdzcWxpdGUtbGVtYmVkJztcbmltcG9ydCB7IFNRM0RhdGFTdG9yZSB9IGZyb20gJ3NxMy1rdi1kYXRhLXN0b3JlJztcblxuaW1wb3J0IHsgQXN5bmNEYXRhYmFzZSB9IGZyb20gJ3Byb21pc2VkLXNxbGl0ZTMnO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNRM1F1ZXJ5TG9nIH0gZnJvbSAnc3FsaXRlMy1xdWVyeS1sb2cnO1xuXG5jb25zdCBkYnVybCA9IHR5cGVvZiBwcm9jZXNzLmVudi5BS19EQl9VUkwgPT09ICdzdHJpbmcnXG4gICAgICAgID8gcHJvY2Vzcy5lbnYuQUtfREJfVVJMXG4gICAgICAgIDogJzptZW1vcnk6JztcblxuZXhwb3J0IGNvbnN0IHNxZGIgPSBhd2FpdCBBc3luY0RhdGFiYXNlLm9wZW4oZGJ1cmwpO1xuLy8gYXdhaXQgc3FkYi5vcGVuKGRidXJsKTtcbi8vIGF3YWl0IHNxZGIub3BlbigndGVzdC5kYicpO1xuLy8gc3FkYi5sb2FkRXh0ZW5zaW9uKHNxbGVhbkxpYnMucmVMaWJQYXRoKTtcbnNxZGIuaW5uZXIubG9hZEV4dGVuc2lvbihzcWxpdGVfcmVnZXguZ2V0TG9hZGFibGVQYXRoKCkpO1xuXG5jb25zdCBsZW1iZWRNb2RlbEZpbGUgPSB0eXBlb2YgcHJvY2Vzcy5lbnYuQUtfTEVNQkVEX01PREVMID09PSAnc3RyaW5nJ1xuICAgICAgICA/IHByb2Nlc3MuZW52LkFLX0xFTUJFRF9NT0RFTFxuICAgICAgICA6IHVuZGVmaW5lZDtcbmV4cG9ydCBjb25zdCBsZW1iZWRNb2RlbE5hbWUgPSB0eXBlb2YgcHJvY2Vzcy5lbnYuQUtfTEVNQkVEX01PREVMX05BTUUgPT09ICdzdHJpbmcnXG4gICAgICAgID8gcHJvY2Vzcy5lbnYuQUtfTEVNQkVEX01PREVMX05BTUVcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbmlmICh0eXBlb2YgbGVtYmVkTW9kZWxGaWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUubG9nKHtcbiAgICAgICAgbGVtYmVkTW9kZWxGaWxlLFxuICAgICAgICBsZW1iZWRNb2RlbE5hbWUsXG4gICAgICAgIGxlbWJlZDogc3FsaXRlX2xlbWJlZC5nZXRMb2FkYWJsZVBhdGgoKSxcbiAgICAgICAgdmVjOiBzcWxpdGVfdmVjLmdldExvYWRhYmxlUGF0aCgpXG4gICAgfSk7XG4gICAgc3FsaXRlX2xlbWJlZC5sb2FkKDxhbnk+c3FkYi5pbm5lcik7XG4gICAgc3FsaXRlX3ZlYy5sb2FkKDxhbnk+c3FkYi5pbm5lcik7XG5cbiAgICBhd2FpdCBzcWRiLnJ1bihgXG4gICAgICAgIElOU0VSVCBJTlRPIHRlbXAubGVtYmVkX21vZGVscyhuYW1lLCBtb2RlbClcbiAgICAgICAgc2VsZWN0ID8sIGxlbWJlZF9tb2RlbF9mcm9tX2ZpbGUoPyk7XG4gICAgYCwgW1xuICAgICAgICBsZW1iZWRNb2RlbE5hbWUsXG4gICAgICAgIGxlbWJlZE1vZGVsRmlsZVxuICAgIF0pO1xufVxuXG5hd2FpdCBzcWRiLnJ1bignUFJBR01BIGpvdXJuYWxfbW9kZT1XQUw7Jyk7XG5cbi8vIGlmICh0eXBlb2YgcHJvY2Vzcy5lbnYuQUtfUFJPRklMRSA9PT0gJ3N0cmluZycpIHtcbi8vICAgICBTUTNRdWVyeUxvZyhzcWRiLmlubmVyLCBwcm9jZXNzLmVudi5BS19QUk9GSUxFKTtcbi8vIH1cblxuLy8gVGhpcyB0cmFjZXMgU1FMIHN0YXRlbWVudHNcbi8vXG4vLyBzcWRiLmlubmVyLm9uKCd0cmFjZScsIHNxbCA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coc3FsKTtcbi8vIH0pO1xuc3FkYi5pbm5lci5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbn0pO1xuXG5zcWRiLmlubmVyLm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xufSk7XG5cbi8vIFByb2ZpbGluZyBTUUwgcXVlcmllc1xuLy8gVGhpcyBtaWdodCBiZSB1c2VmdWwgZm9yIHBlcmZvcm1hbmNlIGV2YWx1YXRpb24uXG4vLyBUaGUgb3V0cHV0IGlzIFRTViBzZXBhcmF0ZWQgZmllbGRzOlxuLy8gICAxLiBiYXNlNjQtZW5jb2RlZCBTUUxcbi8vICAgICAgVGhpcyB3YXMgY2hvc2VuIHRvIHByZXZlbnQgbmV3bGluZXMgaW4gdGhpcyBmaWVsZFxuLy8gICAgICBhbmQgdG8ga2VlcCB0aGUgZm9ybWF0IHNpbXBsZVxuLy8gICAyLiBBcHByb3hpbWF0ZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGV4ZWN1dGVcbi8vXG5pZiAodHlwZW9mIHByb2Nlc3MuZW52LkFLX1BST0ZJTEUgPT09ICdzdHJpbmcnKSB7XG4gICAgU1EzUXVlcnlMb2coc3FkYi5pbm5lciwgcHJvY2Vzcy5lbnYuQUtfUFJPRklMRSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdTUTNEYXRhU3RvcmUobmFtZTogc3RyaW5nKVxuICAgIDogU1EzRGF0YVN0b3JlXG57XG4gICAgLy8gY29uc29sZS5sb2coYG5ld1NRM0RhdGFTdG9yZSAke25hbWV9YCk7XG4gICAgcmV0dXJuIG5ldyBTUTNEYXRhU3RvcmUoc3FkYi5pbm5lciwgbmFtZSk7XG59XG4iXX0=