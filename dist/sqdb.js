/**
 *
 * Copyright 2024-2025 David Herron
 *
 * This file is part of AkashaCMS (http://akashacms.com/).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
// import sqleanLibs from 'sqlite3-sqlean';
import * as sqlite_regex from "sqlite-regex";
import { SQ3DataStore } from 'sq3-kv-data-store';
import { AsyncDatabase } from 'promised-sqlite3';
import { init } from './data-new.js';
import { default as SQ3QueryLog } from 'sqlite3-query-log';
const dburl = typeof process.env.AK_DB_URL === 'string'
    ? process.env.AK_DB_URL
    : ':memory:';
export const sqdb = await AsyncDatabase.open(dburl);
// await sqdb.open(dburl);
// await sqdb.open('test.db');
// sqdb.loadExtension(sqleanLibs.reLibPath);
sqdb.inner.loadExtension(sqlite_regex.getLoadablePath());
await sqdb.run('PRAGMA journal_mode=WAL;');
// if (typeof process.env.AK_PROFILE === 'string') {
//     SQ3QueryLog(sqdb.inner, process.env.AK_PROFILE);
// }
await init();
// This traces SQL statements
//
// sqdb.inner.on('trace', sql => {
//     console.log(sql);
// });
sqdb.inner.on('error', err => {
    console.error(err);
});
sqdb.inner.on('error', err => {
    console.error(err);
});
// Profiling SQL queries
// This might be useful for performance evaluation.
// The output is TSV separated fields:
//   1. base64-encoded SQL
//      This was chosen to prevent newlines in this field
//      and to keep the format simple
//   2. Approximate number of milliseconds to execute
//
if (typeof process.env.AK_PROFILE === 'string') {
    SQ3QueryLog(sqdb.inner, process.env.AK_PROFILE);
}
////////////////////////
export function newSQ3DataStore(name) {
    // console.log(`newSQ3DataStore ${name}`);
    return new SQ3DataStore(sqdb.inner, name);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FkYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9zcWRiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQVdILDJDQUEyQztBQUMzQyxPQUFPLEtBQUssWUFBWSxNQUFNLGNBQWMsQ0FBQztBQUU3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckMsT0FBTyxFQUFFLE9BQU8sSUFBSSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUUzRCxNQUFNLEtBQUssR0FBRyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxLQUFLLFFBQVE7SUFDL0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUztJQUN2QixDQUFDLENBQUMsVUFBVSxDQUFDO0FBRXJCLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxNQUFNLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEQsMEJBQTBCO0FBQzFCLDhCQUE4QjtBQUM5Qiw0Q0FBNEM7QUFDNUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFFekQsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFFM0Msb0RBQW9EO0FBQ3BELHVEQUF1RDtBQUN2RCxJQUFJO0FBRUosTUFBTSxJQUFJLEVBQUUsQ0FBQztBQUViLDZCQUE2QjtBQUM3QixFQUFFO0FBQ0Ysa0NBQWtDO0FBQ2xDLHdCQUF3QjtBQUN4QixNQUFNO0FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0lBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7SUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILHdCQUF3QjtBQUN4QixtREFBbUQ7QUFDbkQsc0NBQXNDO0FBQ3RDLDBCQUEwQjtBQUMxQix5REFBeUQ7QUFDekQscUNBQXFDO0FBQ3JDLHFEQUFxRDtBQUNyRCxFQUFFO0FBQ0YsSUFBSSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxLQUFLLFFBQVEsRUFBRSxDQUFDO0lBQzdDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUVELHdCQUF3QjtBQUV4QixNQUFNLFVBQVUsZUFBZSxDQUFDLElBQVk7SUFHeEMsMENBQTBDO0lBQzFDLE9BQU8sSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMjQtMjAyNSBEYXZpZCBIZXJyb25cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBBa2FzaGFDTVMgKGh0dHA6Ly9ha2FzaGFjbXMuY29tLykuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogU1FMIERhdGFiYXNlIHN1cHBvcnQgdXNpbmcgU1FMSVRFMy5cbiAqIFxuICogV2hhdCdzIHN1cHBvcnRlZCBpcyBTUUxJVEUzT1JNIC0gYSBsaWdodHdlaWdodFxuICogT1JNIHRoYXQgcnVucyBvbiB0b3Agb2YgU1FMSVRFMy5cbiAqL1xuXG5pbXBvcnQgZnMgZnJvbSAnbm9kZTpmcyc7XG5pbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gJ3NxbGl0ZTMnO1xuLy8gaW1wb3J0IHNxbGVhbkxpYnMgZnJvbSAnc3FsaXRlMy1zcWxlYW4nO1xuaW1wb3J0ICogYXMgc3FsaXRlX3JlZ2V4IGZyb20gXCJzcWxpdGUtcmVnZXhcIjtcblxuaW1wb3J0IHsgU1EzRGF0YVN0b3JlIH0gZnJvbSAnc3EzLWt2LWRhdGEtc3RvcmUnO1xuXG5pbXBvcnQgeyBBc3luY0RhdGFiYXNlIH0gZnJvbSAncHJvbWlzZWQtc3FsaXRlMyc7XG5pbXBvcnQgeyBpbml0IH0gZnJvbSAnLi9kYXRhLW5ldy5qcyc7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgU1EzUXVlcnlMb2cgfSBmcm9tICdzcWxpdGUzLXF1ZXJ5LWxvZyc7XG5cbmNvbnN0IGRidXJsID0gdHlwZW9mIHByb2Nlc3MuZW52LkFLX0RCX1VSTCA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBwcm9jZXNzLmVudi5BS19EQl9VUkxcbiAgICAgICAgOiAnOm1lbW9yeTonO1xuXG5leHBvcnQgY29uc3Qgc3FkYiA9IGF3YWl0IEFzeW5jRGF0YWJhc2Uub3BlbihkYnVybCk7XG4vLyBhd2FpdCBzcWRiLm9wZW4oZGJ1cmwpO1xuLy8gYXdhaXQgc3FkYi5vcGVuKCd0ZXN0LmRiJyk7XG4vLyBzcWRiLmxvYWRFeHRlbnNpb24oc3FsZWFuTGlicy5yZUxpYlBhdGgpO1xuc3FkYi5pbm5lci5sb2FkRXh0ZW5zaW9uKHNxbGl0ZV9yZWdleC5nZXRMb2FkYWJsZVBhdGgoKSk7XG5cbmF3YWl0IHNxZGIucnVuKCdQUkFHTUEgam91cm5hbF9tb2RlPVdBTDsnKTtcblxuLy8gaWYgKHR5cGVvZiBwcm9jZXNzLmVudi5BS19QUk9GSUxFID09PSAnc3RyaW5nJykge1xuLy8gICAgIFNRM1F1ZXJ5TG9nKHNxZGIuaW5uZXIsIHByb2Nlc3MuZW52LkFLX1BST0ZJTEUpO1xuLy8gfVxuXG5hd2FpdCBpbml0KCk7XG5cbi8vIFRoaXMgdHJhY2VzIFNRTCBzdGF0ZW1lbnRzXG4vL1xuLy8gc3FkYi5pbm5lci5vbigndHJhY2UnLCBzcWwgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKHNxbCk7XG4vLyB9KTtcbnNxZGIuaW5uZXIub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG59KTtcblxuc3FkYi5pbm5lci5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbn0pO1xuXG4vLyBQcm9maWxpbmcgU1FMIHF1ZXJpZXNcbi8vIFRoaXMgbWlnaHQgYmUgdXNlZnVsIGZvciBwZXJmb3JtYW5jZSBldmFsdWF0aW9uLlxuLy8gVGhlIG91dHB1dCBpcyBUU1Ygc2VwYXJhdGVkIGZpZWxkczpcbi8vICAgMS4gYmFzZTY0LWVuY29kZWQgU1FMXG4vLyAgICAgIFRoaXMgd2FzIGNob3NlbiB0byBwcmV2ZW50IG5ld2xpbmVzIGluIHRoaXMgZmllbGRcbi8vICAgICAgYW5kIHRvIGtlZXAgdGhlIGZvcm1hdCBzaW1wbGVcbi8vICAgMi4gQXBwcm94aW1hdGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBleGVjdXRlXG4vL1xuaWYgKHR5cGVvZiBwcm9jZXNzLmVudi5BS19QUk9GSUxFID09PSAnc3RyaW5nJykge1xuICAgIFNRM1F1ZXJ5TG9nKHNxZGIuaW5uZXIsIHByb2Nlc3MuZW52LkFLX1BST0ZJTEUpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld1NRM0RhdGFTdG9yZShuYW1lOiBzdHJpbmcpXG4gICAgOiBTUTNEYXRhU3RvcmVcbntcbiAgICAvLyBjb25zb2xlLmxvZyhgbmV3U1EzRGF0YVN0b3JlICR7bmFtZX1gKTtcbiAgICByZXR1cm4gbmV3IFNRM0RhdGFTdG9yZShzcWRiLmlubmVyLCBuYW1lKTtcbn1cbiJdfQ==