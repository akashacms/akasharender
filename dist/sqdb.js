/**
 *
 * Copyright 2024-2025 David Herron
 *
 * This file is part of AkashaCMS (http://akashacms.com/).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * SQL Database support using SQLITE3.
 *
 * What's supported is SQLITE3ORM - a lightweight
 * ORM that runs on top of SQLITE3.
 */
import fs from 'node:fs';
import { Base64 } from 'js-base64';
// import sqleanLibs from 'sqlite3-sqlean';
import * as sqlite_regex from "sqlite-regex";
import { SQ3DataStore } from 'sq3-kv-data-store';
import { AsyncDatabase } from 'promised-sqlite3';
/**
 * Subclass the SqlDatabase so we can expose
 * the underlying SQLITE3 Database object and
 * some useful methods on that class.
 */
// export class SqlDatabaseChild extends SqlDatabase {
//     get _db(): Database { return this.db; }
//     loadExtension(filename: string, callback?: (err?: Error | null) => void): Database {
//         return this.db.loadExtension(filename, callback);
//     }
// }
const dburl = typeof process.env.AK_DB_URL === 'string'
    ? process.env.AK_DB_URL
    : ':memory:';
// Turns on full stack traces
// SqlDatabase.verbose();
export const sqdb = await AsyncDatabase.open(dburl);
// await sqdb.open(dburl);
// await sqdb.open('test.db');
// sqdb.loadExtension(sqleanLibs.reLibPath);
sqdb.inner.loadExtension(sqlite_regex.getLoadablePath());
// This traces SQL statements
//
// sqdb.inner.on('trace', sql => {
//     console.log(sql);
// });
sqdb.inner.on('error', err => {
    console.error(err);
});
sqdb.inner.on('error', err => {
    console.error(err);
});
// Profiling SQL queries
// This might be useful for performance evaluation.
// The output is TSV separated fields:
//   1. base64-encoded SQL
//      This was chosen to prevent newlines in this field
//      and to keep the format simple
//   2. Approximate number of milliseconds to execute
//
// In practice the number of milliseconds is either
// zero or one, indicating there isn't enough precision
// in the code invoking this callback.
//
// In other words this doesn't seem terribly useful.
if (typeof process.env.AK_PROFILE === 'string') {
    sqdb.inner.on('profile', (sql, time) => {
        fs.writeFileSync(process.env.AK_PROFILE, `${Base64.encode(sql)}\t${time}\n`, { flag: "a+" });
    });
}
////////////////////////
export function newSQ3DataStore(name) {
    // console.log(`newSQ3DataStore ${name}`);
    return new SQ3DataStore(sqdb.inner, name);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FkYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9zcWRiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUVIOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3pCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbkMsMkNBQTJDO0FBQzNDLE9BQU8sS0FBSyxZQUFZLE1BQU0sY0FBYyxDQUFDO0FBRzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVqRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQ7Ozs7R0FJRztBQUNILHNEQUFzRDtBQUN0RCw4Q0FBOEM7QUFFOUMsMkZBQTJGO0FBQzNGLDREQUE0RDtBQUM1RCxRQUFRO0FBQ1IsSUFBSTtBQUVKLE1BQU0sS0FBSyxHQUFHLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssUUFBUTtJQUMvQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTO0lBQ3ZCLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFFckIsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6QixNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BELDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIsNENBQTRDO0FBQzVDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBRXpELDZCQUE2QjtBQUM3QixFQUFFO0FBQ0Ysa0NBQWtDO0FBQ2xDLHdCQUF3QjtBQUN4QixNQUFNO0FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0lBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7SUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILHdCQUF3QjtBQUN4QixtREFBbUQ7QUFDbkQsc0NBQXNDO0FBQ3RDLDBCQUEwQjtBQUMxQix5REFBeUQ7QUFDekQscUNBQXFDO0FBQ3JDLHFEQUFxRDtBQUNyRCxFQUFFO0FBQ0YsbURBQW1EO0FBQ25ELHVEQUF1RDtBQUN2RCxzQ0FBc0M7QUFDdEMsRUFBRTtBQUNGLG9EQUFvRDtBQUNwRCxJQUFJLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssUUFBUSxFQUFFLENBQUM7SUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ25DLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQ25DLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksRUFDbEMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQ2pCLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCx3QkFBd0I7QUFFeEIsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFZO0lBR3hDLDBDQUEwQztJQUMxQyxPQUFPLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIENvcHlyaWdodCAyMDI0LTIwMjUgRGF2aWQgSGVycm9uXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgQWthc2hhQ01TIChodHRwOi8vYWthc2hhY21zLmNvbS8pLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFNRTCBEYXRhYmFzZSBzdXBwb3J0IHVzaW5nIFNRTElURTMuXG4gKiBcbiAqIFdoYXQncyBzdXBwb3J0ZWQgaXMgU1FMSVRFM09STSAtIGEgbGlnaHR3ZWlnaHRcbiAqIE9STSB0aGF0IHJ1bnMgb24gdG9wIG9mIFNRTElURTMuXG4gKi9cblxuaW1wb3J0IGZzIGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0IHsgQmFzZTY0IH0gZnJvbSAnanMtYmFzZTY0JztcbmltcG9ydCB7IERhdGFiYXNlIH0gZnJvbSAnc3FsaXRlMyc7XG4vLyBpbXBvcnQgc3FsZWFuTGlicyBmcm9tICdzcWxpdGUzLXNxbGVhbic7XG5pbXBvcnQgKiBhcyBzcWxpdGVfcmVnZXggZnJvbSBcInNxbGl0ZS1yZWdleFwiO1xuXG5pbXBvcnQgeyBTcWxEYXRhYmFzZSB9IGZyb20gJ3NxbGl0ZTNvcm0nO1xuaW1wb3J0IHsgU1EzRGF0YVN0b3JlIH0gZnJvbSAnc3EzLWt2LWRhdGEtc3RvcmUnO1xuXG5pbXBvcnQgeyBBc3luY0RhdGFiYXNlIH0gZnJvbSAncHJvbWlzZWQtc3FsaXRlMyc7XG5cbi8qKlxuICogU3ViY2xhc3MgdGhlIFNxbERhdGFiYXNlIHNvIHdlIGNhbiBleHBvc2VcbiAqIHRoZSB1bmRlcmx5aW5nIFNRTElURTMgRGF0YWJhc2Ugb2JqZWN0IGFuZFxuICogc29tZSB1c2VmdWwgbWV0aG9kcyBvbiB0aGF0IGNsYXNzLlxuICovXG4vLyBleHBvcnQgY2xhc3MgU3FsRGF0YWJhc2VDaGlsZCBleHRlbmRzIFNxbERhdGFiYXNlIHtcbi8vICAgICBnZXQgX2RiKCk6IERhdGFiYXNlIHsgcmV0dXJuIHRoaXMuZGI7IH1cblxuLy8gICAgIGxvYWRFeHRlbnNpb24oZmlsZW5hbWU6IHN0cmluZywgY2FsbGJhY2s/OiAoZXJyPzogRXJyb3IgfCBudWxsKSA9PiB2b2lkKTogRGF0YWJhc2Uge1xuLy8gICAgICAgICByZXR1cm4gdGhpcy5kYi5sb2FkRXh0ZW5zaW9uKGZpbGVuYW1lLCBjYWxsYmFjayk7XG4vLyAgICAgfVxuLy8gfVxuXG5jb25zdCBkYnVybCA9IHR5cGVvZiBwcm9jZXNzLmVudi5BS19EQl9VUkwgPT09ICdzdHJpbmcnXG4gICAgICAgID8gcHJvY2Vzcy5lbnYuQUtfREJfVVJMXG4gICAgICAgIDogJzptZW1vcnk6JztcblxuLy8gVHVybnMgb24gZnVsbCBzdGFjayB0cmFjZXNcbi8vIFNxbERhdGFiYXNlLnZlcmJvc2UoKTtcbmV4cG9ydCBjb25zdCBzcWRiID0gYXdhaXQgQXN5bmNEYXRhYmFzZS5vcGVuKGRidXJsKTtcbi8vIGF3YWl0IHNxZGIub3BlbihkYnVybCk7XG4vLyBhd2FpdCBzcWRiLm9wZW4oJ3Rlc3QuZGInKTtcbi8vIHNxZGIubG9hZEV4dGVuc2lvbihzcWxlYW5MaWJzLnJlTGliUGF0aCk7XG5zcWRiLmlubmVyLmxvYWRFeHRlbnNpb24oc3FsaXRlX3JlZ2V4LmdldExvYWRhYmxlUGF0aCgpKTtcblxuLy8gVGhpcyB0cmFjZXMgU1FMIHN0YXRlbWVudHNcbi8vXG4vLyBzcWRiLmlubmVyLm9uKCd0cmFjZScsIHNxbCA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coc3FsKTtcbi8vIH0pO1xuc3FkYi5pbm5lci5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbn0pO1xuXG5zcWRiLmlubmVyLm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xufSk7XG5cbi8vIFByb2ZpbGluZyBTUUwgcXVlcmllc1xuLy8gVGhpcyBtaWdodCBiZSB1c2VmdWwgZm9yIHBlcmZvcm1hbmNlIGV2YWx1YXRpb24uXG4vLyBUaGUgb3V0cHV0IGlzIFRTViBzZXBhcmF0ZWQgZmllbGRzOlxuLy8gICAxLiBiYXNlNjQtZW5jb2RlZCBTUUxcbi8vICAgICAgVGhpcyB3YXMgY2hvc2VuIHRvIHByZXZlbnQgbmV3bGluZXMgaW4gdGhpcyBmaWVsZFxuLy8gICAgICBhbmQgdG8ga2VlcCB0aGUgZm9ybWF0IHNpbXBsZVxuLy8gICAyLiBBcHByb3hpbWF0ZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGV4ZWN1dGVcbi8vXG4vLyBJbiBwcmFjdGljZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpcyBlaXRoZXJcbi8vIHplcm8gb3Igb25lLCBpbmRpY2F0aW5nIHRoZXJlIGlzbid0IGVub3VnaCBwcmVjaXNpb25cbi8vIGluIHRoZSBjb2RlIGludm9raW5nIHRoaXMgY2FsbGJhY2suXG4vL1xuLy8gSW4gb3RoZXIgd29yZHMgdGhpcyBkb2Vzbid0IHNlZW0gdGVycmlibHkgdXNlZnVsLlxuaWYgKHR5cGVvZiBwcm9jZXNzLmVudi5BS19QUk9GSUxFID09PSAnc3RyaW5nJykge1xuICAgIHNxZGIuaW5uZXIub24oJ3Byb2ZpbGUnLCAoc3FsLCB0aW1lKSA9PiB7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMocHJvY2Vzcy5lbnYuQUtfUFJPRklMRSxcbiAgICAgICAgICAgIGAke0Jhc2U2NC5lbmNvZGUoc3FsKX1cXHQke3RpbWV9XFxuYCxcbiAgICAgICAgICAgIHsgZmxhZzogXCJhK1wiIH1cbiAgICAgICAgKTtcbiAgICB9KTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdTUTNEYXRhU3RvcmUobmFtZTogc3RyaW5nKVxuICAgIDogU1EzRGF0YVN0b3JlXG57XG4gICAgLy8gY29uc29sZS5sb2coYG5ld1NRM0RhdGFTdG9yZSAke25hbWV9YCk7XG4gICAgcmV0dXJuIG5ldyBTUTNEYXRhU3RvcmUoc3FkYi5pbm5lciwgbmFtZSk7XG59XG4iXX0=